#!/usr/bin/python3

from math import *
import sys

def to_int(arg):
    try:
        return int(arg)
    except ValueError:
        exit(84)

def to_float(arg):
    try:
        return float(arg)
    except ValueError:
        exit(84)

def error_managing():
    if len(sys.argv) == 1:
        exit(84)
    if (sys.argv[1] == "-h"):
        print("USAGE\n\t./108trigo fun a0 a1 a2 ...\n")
        print("DESCRIPTION")
        print("\tfun\t\tfunction to b applied, among at least \"EXP\", \"COS\", \"SIN\", \"COSH\" and \"SINH\"")
        print("\tai\t\tcoeficients of the matrix")
        exit(0)
    if len(sys.argv) <= 2:
        exit(84)
    elif (int(sqrt(len(sys.argv) - 2) + 0.5)**2) != (len(sys.argv) - 2):
        exit(84)
    if (sys.argv[1] != "EXP" and sys.argv[1] != "COS" and sys.argv[1] != "SIN" and sys.argv[1] != "COSH" and sys.argv[1] != "SINH"):
        exit(84)

def create_matrix(size):
    matrix = [[0] * size for loop in range(size)]
    return matrix

def fill_matrix(matrix, size):
    nb = 2
    for i in range(size):
        for j in range(size):
            matrix[i][j] = to_int(sys.argv[nb])
            nb += 1
    return (matrix)

def print_matrix(matrix):
    for i in range(len(matrix)):
        for j in range(len(matrix)):
            if (j == len(matrix) - 1):
                print("%.2f" %(matrix[i][j]))
            else :
                print("%.2f\t" %(matrix[i][j]) , end='')

def exp_function():
    return (1)

def matrix_add(matrix1, matrix2):
    matrix3 = [[0] * len(matrix1) for i in range(len(matrix1))]
    for i in range(len(matrix1)):
        for j in range(len(matrix1)):
            matrix3[i][j] = matrix1[i][j] + matrix2[i][j]
    return (matrix3)

def matrix_sub(matrix1, matrix2):
    matrix3 = [[0] * len(matrix1) for i in range(len(matrix1))]
    for i in range(len(matrix1)):
        for j in range(len(matrix1)):
            matrix3[i][j] = matrix1[i][j] - matrix2[i][j]
    return (matrix3)

def matrix_mul(matrix1, matrix2):
    matrix3 = [[0] * len(matrix1) for i in range(len(matrix1))]
    for line in range(len(matrix1)):
        for j in range(len(matrix1)):
            for i in range(len(matrix1)):
                matrix3[line][j] += matrix1[line][i] * matrix2[i][j]
    return (matrix3)

def matrix_div(matrix1, nb):
    for i in range(len(matrix1)):
        for j in range(len(matrix1)):
            matrix1[i][j] = matrix1[i][j] / nb
    return (matrix1)

def matrix_power(matrix1, nb):
    matrix2 = [[0] * len(matrix1) for i in range(len(matrix1))]    
    for i in range(len(matrix1)):
        matrix2[i][i] = 1
    for i in range(0, nb):
        matrix2 = matrix_mul(matrix2, matrix1)
    return (matrix2)

def factorial(nb):
    var = 1
    for i in range(2, nb + 1):
        var *= i
    return (var)

def unit_matrix(matrix):   
    for i in range(len(matrix)):
        matrix[i][i] = 1
    return (matrix)

def exp_function(matrix):
    matrix_res = [[0] * len(matrix) for i in range(len(matrix))] 
    matrix_res = unit_matrix(matrix_res)
    matrix2 = matrix
    for i in range(1, 100):
        div = matrix_div(matrix_power(matrix2, i), factorial(i))
        matrix_res = matrix_add(matrix_res, div)
        matrix2 = matrix
    return (matrix_res)

def cos_function(matrix):
    switch = 0
    matrix_res = [[0] * len(matrix) for i in range(len(matrix))] 
    matrix2 = matrix
    for i in range(0, 100, 2):
        div = matrix_div(matrix_power(matrix2, i), factorial(i))
        if (switch % 2 == 1):
            matrix_res = matrix_sub(matrix_res, div)
        else:
            matrix_res = matrix_add(matrix_res, div)
        matrix2 = matrix
        switch += 1
    return (matrix_res)

def sin_function(matrix):
    switch = 0
    matrix_res = [[0] * len(matrix) for i in range(len(matrix))] 
    matrix2 = matrix
    for i in range(1, 100, 2):
        div = matrix_div(matrix_power(matrix2, i), factorial(i))
        if (switch % 2 == 1):
            matrix_res = matrix_sub(matrix_res, div)
        else:
            matrix_res = matrix_add(matrix_res, div)
        matrix2 = matrix
        switch += 1
    return (matrix_res)

def cosh_function(matrix):
    matrix_res = [[0] * len(matrix) for i in range(len(matrix))] 
    matrix2 = matrix
    for i in range(0, 100, 2):
        div = matrix_div(matrix_power(matrix2, i), factorial(i))
        matrix_res = matrix_add(matrix_res, div)
        matrix2 = matrix
    return (matrix_res)

def sinh_function(matrix):
    matrix_res = [[0] * len(matrix) for i in range(len(matrix))] 
    matrix2 = matrix
    for i in range(1, 100, 2):
        div = matrix_div(matrix_power(matrix2, i), factorial(i))
        matrix_res = matrix_add(matrix_res, div)
        matrix2 = matrix
    return (matrix_res)

def main():
    error_managing()
    lenght = int(sqrt(len(sys.argv) - 2))
    string = sys.argv[1]
    matrix = create_matrix(lenght)
    matrix = fill_matrix(matrix, lenght)
    if (string == "EXP"):
        result = exp_function(matrix)
    if (string == "COS"):
        result = cos_function(matrix)
    if (string == "SIN"):
        result = sin_function(matrix)
    if (string == "COSH"):
        result = cosh_function(matrix)
    if (string == "SINH"):
        result = sinh_function(matrix)
    print_matrix(result)

main()